{:namespaces
 ({:source-url nil,
   :wiki-url "control.commands-api.html",
   :name "control.commands",
   :author
   "Sun Ning <classicning@gmail.com>  Dennis Zhuang<killme2008@gmail.com>",
   :doc "A set of DSL for ssh, inspired by Fabric"}
  {:source-url nil,
   :wiki-url "control.core-api.html",
   :name "control.core",
   :doc nil}
  {:source-url nil,
   :wiki-url "control.main-api.html",
   :name "control.main",
   :doc nil}
  {:source-url nil,
   :wiki-url "leiningen.control-api.html",
   :name "leiningen.control",
   :doc nil}),
 :vars
 ({:arglists ([file line & opts]),
   :name "append",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/append",
   :doc "Append a line to a file",
   :var-type "function",
   :line 41,
   :file "src/control/commands.clj"}
  {:arglists ([file]),
   :name "cat",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/cat",
   :doc "cat a file",
   :var-type "function",
   :line 88,
   :file "src/control/commands.clj"}
  {:arglists ([path & cmd]),
   :name "cd",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/cd",
   :doc "change current directory",
   :var-type "macro",
   :line 11,
   :file "src/control/commands.clj"}
  {:arglists ([mod file]),
   :name "chmod",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/chmod",
   :doc "chmod [mod] [file]",
   :var-type "function",
   :line 93,
   :file "src/control/commands.clj"}
  {:arglists ([file pat & opts]),
   :name "comm",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/comm",
   :doc
   "Comments a line in a file with special character,default :char is \"#\"\nIt use sed function to replace the line matched pattern, :sudo is also valid",
   :var-type "function",
   :line 73,
   :file "src/control/commands.clj"}
  {:arglists ([key val & cmd]),
   :name "env",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/env",
   :doc "declare a env variable for next command",
   :var-type "macro",
   :line 21,
   :file "src/control/commands.clj"}
  {:arglists ([new-path & cmd]),
   :name "path",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/path",
   :doc "modify shell path",
   :var-type "macro",
   :line 6,
   :file "src/control/commands.clj"}
  {:arglists ([pcmd & cmd]),
   :name "prefix",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/prefix",
   :doc
   "execute a prefix command, for instance, activate shell profile",
   :var-type "macro",
   :line 16,
   :file "src/control/commands.clj"}
  {:arglists ([& cmds]),
   :name "run",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/run",
   :doc "simply run several commands",
   :var-type "function",
   :line 26,
   :file "src/control/commands.clj"}
  {:arglists ([file before after & opts]),
   :name "sed",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/sed",
   :doc
   "Use sed to replace strings matched pattern with options.Valid options include:\n:sudo   =>  true or false to use sudo,default is false.\n:flags   => sed options,default is nil.\n:limit    =>  sed limit,default is not limit.\n:backup  => backup file posfix,default is \".bak\"\nEquivalent to sed -i<backup> -r -e \"/<limit>/ s/<before>/<after>/<flags>g <filename>\".",
   :var-type "function",
   :line 55,
   :file "src/control/commands.clj"}
  {:arglists ([cmd]),
   :name "sudo",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/sudo",
   :doc "run a command with sudo",
   :var-type "macro",
   :line 34,
   :file "src/control/commands.clj"}
  {:arglists ([file pat & opts]),
   :name "uncomm",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/uncomm",
   :doc "uncomment a line in a file",
   :var-type "function",
   :line 81,
   :file "src/control/commands.clj"}
  {:arglists ([host user cluster task & args]),
   :name "call",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/call",
   :doc
   "Call other tasks in deftask,for example:\n(call :ps \"java\")",
   :var-type "function",
   :line 175,
   :file "src/control/core.clj"}
  {:arglists ([name & args]),
   :name "defcluster",
   :namespace "control.core",
   :source-url nil,
   :added "0.1",
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/defcluster",
   :doc "Define a cluster including some remote machines",
   :var-type "macro",
   :line 200,
   :file "src/control/core.clj"}
  {:arglists ([name & decl]),
   :name "deftask",
   :namespace "control.core",
   :source-url nil,
   :added "0.1",
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/deftask",
   :doc
   "Define a task for executing on remote machines:\n(deftask :date \"Get date from remote machines\"\n          (ssh \"date\"))",
   :var-type "macro",
   :line 143,
   :file "src/control/core.clj"}
  {:arglists ([host user cluster file]),
   :name "exists?",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/exists?",
   :doc "Check if a file exists",
   :var-type "function",
   :line 183,
   :file "src/control/core.clj"}
  {:arglists ([host user cluster local remote & opts]),
   :name "scp",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/scp",
   :doc
   "Copy local files to remote machines:\n(scp \"test.txt\" \"remote.txt\")\n(scp [\"1.txt\" \"2.txt\"] \"/home/deploy/\")",
   :var-type "function",
   :line 103,
   :file "src/control/core.clj"}
  {:arglists ([host user cluster cmd & opts]),
   :name "ssh",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/ssh",
   :doc
   "Execute commands via ssh:\n(ssh \"date\")\n(ssh \"ps aux|grep java\")",
   :var-type "function",
   :line 73,
   :file "src/control/core.clj"})}
