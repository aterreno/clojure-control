{:namespaces
 ({:source-url nil,
   :wiki-url "control.commands-api.html",
   :name "control.commands",
   :author
   "Sun Ning <classicning@gmail.com>  Dennis Zhuang<killme2008@gmail.com>",
   :doc
   "A set of DSL for ssh, inspired by Fabric,\nplease see https://github.com/killme2008/clojure-control/wiki/commands"}
  {:source-url nil,
   :wiki-url "control.core-api.html",
   :name "control.core",
   :doc nil}
  {:source-url nil,
   :wiki-url "control.main-api.html",
   :name "control.main",
   :doc nil}
  {:source-url nil,
   :wiki-url "leiningen.control-api.html",
   :name "leiningen.control",
   :doc nil}),
 :vars
 ({:arglists ([file line & opts]),
   :name "append",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/append",
   :doc "Append a line to a file",
   :var-type "function",
   :line 42,
   :file "src/control/commands.clj"}
  {:arglists ([file]),
   :name "cat",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/cat",
   :doc "cat a file",
   :var-type "function",
   :line 89,
   :file "src/control/commands.clj"}
  {:arglists ([path & cmd]),
   :name "cd",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/cd",
   :doc "change current directory",
   :var-type "macro",
   :line 12,
   :file "src/control/commands.clj"}
  {:arglists ([mod file]),
   :name "chmod",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/chmod",
   :doc "chmod [mod] [file]",
   :var-type "function",
   :line 94,
   :file "src/control/commands.clj"}
  {:arglists ([file pat & opts]),
   :name "comm",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/comm",
   :doc
   "Comments a line in a file with special character,default :char is \"#\"\nIt use sed function to replace the line matched pattern, :sudo is also valid",
   :var-type "function",
   :line 74,
   :file "src/control/commands.clj"}
  {:arglists ([key val & cmd]),
   :name "env",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/env",
   :doc "declare a env variable for next command",
   :var-type "macro",
   :line 22,
   :file "src/control/commands.clj"}
  {:arglists ([new-path & cmd]),
   :name "path",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/path",
   :doc "modify shell path",
   :var-type "macro",
   :line 7,
   :file "src/control/commands.clj"}
  {:arglists ([pcmd & cmd]),
   :name "prefix",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/prefix",
   :doc
   "execute a prefix command, for instance, activate shell profile",
   :var-type "macro",
   :line 17,
   :file "src/control/commands.clj"}
  {:arglists ([& cmds]),
   :name "run",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/run",
   :doc "simply run several commands",
   :var-type "function",
   :line 27,
   :file "src/control/commands.clj"}
  {:arglists ([file before after & opts]),
   :name "sed",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/sed",
   :doc
   "Use sed to replace strings matched pattern with options.Valid options include:\n:sudo   =>  true or false to use sudo,default is false.\n:flags   => sed options,default is nil.\n:limit    =>  sed limit,default is not limit.\n:backup  => backup file posfix,default is \".bak\"\nEquivalent to sed -i<backup> -r -e \"/<limit>/ s/<before>/<after>/<flags>g <filename>\".",
   :var-type "function",
   :line 56,
   :file "src/control/commands.clj"}
  {:arglists ([cmd]),
   :name "sudo",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/sudo",
   :doc "run a command with sudo",
   :var-type "macro",
   :line 35,
   :file "src/control/commands.clj"}
  {:arglists ([file pat & opts]),
   :name "uncomm",
   :namespace "control.commands",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.commands-api.html#control.commands/uncomm",
   :doc "uncomment a line in a file",
   :var-type "function",
   :line 82,
   :file "src/control/commands.clj"}
  {:arglists ([task & args]),
   :name "call",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/call",
   :doc
   "Call other tasks in deftask,for example:\n(call :ps \"java\")",
   :var-type "function",
   :line 256,
   :file "src/control/core.clj"}
  {:arglists ([]),
   :name "clear-options!",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/clear-options!",
   :doc "Clear global options",
   :var-type "function",
   :line 121,
   :file "src/control/core.clj"}
  {:arglists ([cname & args]),
   :name "defcluster",
   :namespace "control.core",
   :source-url nil,
   :added "0.1",
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/defcluster",
   :doc
   "Define a cluster including some remote machines,for example:\n      (defcluster :mycluster\n                :user \"login\"\n                :addresses [\"a.domain.com\" \"b.domain.com\"])\n\n Please see https://github.com/killme2008/clojure-control/wiki/Define-clusters\n",
   :var-type "macro",
   :line 283,
   :file "src/control/core.clj"}
  {:arglists ([tname & decl]),
   :name "deftask",
   :namespace "control.core",
   :source-url nil,
   :added "0.1",
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/deftask",
   :doc
   "Define a task for executing on remote machines:\n (deftask :date \"Get date from remote machines\"\n           (ssh \"date\"))\n\nPlease see https://github.com/killme2008/clojure-control/wiki/Define-tasks",
   :var-type "macro",
   :line 221,
   :file "src/control/core.clj"}
  {:arglists ([file]),
   :name "exists?",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/exists?",
   :doc "Check if a file or directory is exists",
   :var-type "function",
   :line 265,
   :file "src/control/core.clj"}
  {:arglists ([cmd]),
   :name "local",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/local",
   :doc "Execute command on local machine",
   :var-type "function",
   :line 56,
   :file "src/control/core.clj"}
  {:arglists ([src dst & opts]),
   :name "rsync",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/rsync",
   :doc
   "Rsync local files to remote machine's files,for example:\n   (deftask :deploy \"scp files to remote machines\" []\n  (rsync \"src/\" \":/home/login\"))\n\n  Valid options:\n  :rsync-options  -- rsync options string\n",
   :var-type "function",
   :line 152,
   :file "src/control/core.clj"}
  {:arglists ([local remote & opts]),
   :name "scp",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/scp",
   :doc
   "Copy local files to remote machines:\n (scp \"test.txt\" \"remote.txt\")\n (scp [\"1.txt\" \"2.txt\"] \"/home/deploy/\" :sudo true :mode 755)\n\nValid options:\n  :sudo  -- whether to copy files to remote machines as root\n  :mode -- files permission on remote machines\n  :scp-options -- scp options string",
   :var-type "function",
   :line 174,
   :file "src/control/core.clj"}
  {:arglists ([key value & kvs]),
   :name "set-options!",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/set-options!",
   :doc
   "Set global options for ssh,scp and rsync,\n key and value  could be:\n\n    Key                               Value\n:ssh-options        a ssh options string,for example \"-o ConnectTimeout=3000\"\n:scp-options       a scp options string\n:rsync-options    a rsync options string.\n:user                    global user for cluster,if cluster do not have :user ,it will use this by default.\n:parallel               if to execute task on remote machines in parallel,default is false\n\nExample:\n      (set-options! :ssh-options \"-o ConnectTimeout=3000\")\n\n",
   :var-type "function",
   :line 101,
   :file "src/control/core.clj"}
  {:arglists ([cmd & opts]),
   :name "ssh",
   :namespace "control.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/control.core-api.html#control.core/ssh",
   :doc
   "Execute commands via ssh:\n(ssh \"date\")\n(ssh \"ps aux|grep java\")\n(ssh \"sudo apt-get update\" :sudo true)\n\nValid options:\n:sudo   whether to run commands as root,default is false\n:ssh-options  -- ssh options string",
   :var-type "function",
   :line 126,
   :file "src/control/core.clj"})}
